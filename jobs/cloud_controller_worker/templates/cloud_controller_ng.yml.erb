<%
  require 'cgi'

  def discover_external_ip
    networks = spec.networks.marshal_dump
    network = networks.values.detect(&:default) || networks.values.first
    raise "Could not determine IP address via network spec: #{networks}" unless network
    network.ip
  end

  def yaml_escape(input_string)
    chars_to_escape = /[:\\"\x00-\x1f\x7f]/
    chars_needing_quotes = /[ !#'&%*,:>@\[\]\\`{|}]/
    delimiter = (chars_needing_quotes.match(input_string) ||
              chars_to_escape.match(input_string)) ? '"' : ''
    fixed_string = input_string.gsub(/(#{chars_to_escape})/) { |m| "\\x#{'%x' % m.ord}" }

    "#{delimiter}#{fixed_string}#{delimiter}"
  end

  def extract_active_encryption_key_label(keys)
    return '' if keys.empty?
    active_keys = keys.select { |key| key['active'] }
    if active_keys.length == 1
      return active_keys.first['label']
    end
    raise "Error for database_encryption: #{active_keys.length} were marked active. Only one key may be active"
  end
%>
---
#Actually NGX host and port
local_route: <%= discover_external_ip %>
external_port: <%= p("cc.external_port") %>
tls_port: <%= p("cc.tls_port") %>
internal_service_hostname: <%= p("cc.internal_service_hostname") %>

readiness_port:
  cloud_controller_worker: <%= p("cc.readiness_port.cloud_controller_worker") %>

newrelic_enabled: <%= !!properties.cc.newrelic.license_key %>
development_mode: <%= p("cc.development_mode") %>

external_protocol: <%= p("cc.external_protocol") %>
external_domain: <%= p("cc.external_host") %>.<%= p("system_domain") %>

jobs:
  global:
    timeout_in_seconds: <%= p("cc.jobs.global.timeout_in_seconds") %>
  <% if_p("cc.jobs.blobstore_delete.timeout_in_seconds") do |timeout| %>
  blobstore_delete:
    timeout_in_seconds: <%= timeout %>
  <% end %>
  <% if_p("cc.jobs.priorities") do |priorities| %>
  priorities: <%= priorities.to_json %>
  <% end %>
  threads: <%= p("cc.jobs.generic.number_of_threads") %>

default_app_memory: <%= p("cc.default_app_memory") %>
default_app_disk_in_mb: <%= p("cc.default_app_disk_in_mb") %>
maximum_app_disk_in_mb: <%= p("cc.maximum_app_disk_in_mb") %>

instance_file_descriptor_limit: <%= p("cc.instance_file_descriptor_limit") %>

default_app_log_rate_limit_in_bytes_per_second: <%= p("cc.default_app_log_rate_limit_in_bytes_per_second") %>

nginx:
  use_nginx: true
  instance_socket: "/var/vcap/sys/run/cloud_controller_worker/cloud_controller.sock"

index: <%= spec.index %>
name: <%= name %>
volume_services_enabled: <%= link("cloud_controller_internal").p("cc.volume_services_enabled") %>
<% link("cloud_controller_internal").if_p("router.route_services_secret") do %>
route_services_enabled: <%= !link("cloud_controller_internal").p("router.route_services_secret").empty? %>
<% end.else do %>
route_services_enabled: false
<% end %>

logging:
  file: /var/vcap/sys/log/cloud_controller_worker/cloud_controller_worker.log
  syslog: vcap.cloud_controller_ng
  level: "<%= p("cc.logging_level") %>"
  max_retries: <%= p("cc.logging_max_retries") %>
  format:
    timestamp: <%= link("cloud_controller_internal").p("cc.logging.format.timestamp") %>

log_audit_events: <%= p("cc.log_audit_events") %>

loggregator:
  router: <%= p("metron_endpoint.host") %>:<%= p("metron_endpoint.port") %>

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
max_migration_duration_in_minutes: <%= p("ccdb.max_migration_duration_in_minutes") %>
db: &db
  database:
    adapter: <%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>
    host: <%= database_address %>
    port: <%= p("ccdb.port") %>
    user: <%= db_role["name"] %>
    password: <%= yaml_escape(db_role["password"]) %>
    database: <%= db["name"] %>
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: "<%= p("cc.db_logging_level") %>"
  log_db_queries: <%= p("cc.log_db_queries") %>
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
  read_timeout: <%= p("ccdb.read_timeout") %>
  connection_validation_timeout: <%= p("ccdb.connection_validation_timeout") %>
  <% if_p("ccdb.ca_cert") do %>
  ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/db_ca.crt"
  <% end %>
<% if_p("ccdb.connection_expiration_timeout") do |expiration_timeout| %>
  connection_expiration_timeout: <%= expiration_timeout %>
<% end %>
<% if_p("ccdb.connection_expiration_random_delay") do |expiration_delay| %>
  connection_expiration_random_delay: <%= expiration_delay %>
<% end %>

<% system_domain = p("system_domain") %>

uaa:
  internal_url: <%= "https://#{p("cc.uaa.internal_url")}:#{p("uaa.ssl.port")}" %>
  ca_file: /var/vcap/jobs/cloud_controller_worker/config/certs/uaa_ca.crt
  <% if_link("cloud_controller_internal") do |cc_internal| %>
  client_timeout: <%= cc_internal.p("cc.uaa.client_timeout")%>
  <% end %>

# App staging parameters
staging:
  timeout_in_seconds: <%= p("cc.staging_timeout_in_seconds") %>
  auth:
    user: <%= p("cc.staging_upload_user") %>
    password: <%= yaml_escape(p("cc.staging_upload_password")) %>

default_health_check_timeout: <%= p("cc.default_health_check_timeout") %>
maximum_health_check_timeout: <%= p("cc.maximum_health_check_timeout") %>

stacks_file: /var/vcap/jobs/cloud_controller_worker/config/stacks.yml

resource_pool:
  blobstore_type: <%= p("cc.resource_pool.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.resource_pool.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.resource_pool.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.resource_pool.webdav_config.private_endpoint") %>
    username: <%= p("cc.resource_pool.webdav_config.username") %>
    password: <%= yaml_escape(p("cc.resource_pool.webdav_config.password")) %>
    <% if p("cc.resource_pool.webdav_config.ca_cert") != "" && p("cc.resource_pool.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/resource_pool_ca_cert.pem"
    <% end %>
  minimum_size: <%= p("cc.resource_pool.minimum_size") %>
  maximum_size: <%= p("cc.resource_pool.maximum_size") %>
  resource_directory_key: <%= p("cc.resource_pool.resource_directory_key") %>
  <% if_p("cc.resource_pool.cdn") do %>
  cdn:
    uri: <%= p("cc.resource_pool.cdn.uri") %>
    key_pair_id: <%= p("cc.resource_pool.cdn.key_pair_id") %>
    private_key: <%= p("cc.resource_pool.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.resource_pool.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.resource_pool.fog_aws_storage_options", {}).to_json %>
  fog_gcp_storage_options: <%= p("cc.resource_pool.fog_gcp_storage_options", {}).to_json %>

packages:
  blobstore_type: <%= p("cc.packages.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.packages.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.packages.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.packages.webdav_config.private_endpoint") %>
    username: <%= p("cc.packages.webdav_config.username") %>
    password: <%= yaml_escape(p("cc.packages.webdav_config.password")) %>
    <% if p("cc.packages.webdav_config.ca_cert") != "" && p("cc.packages.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/packages_ca_cert.pem"
    <% end %>
  app_package_directory_key: <%= p("cc.packages.app_package_directory_key") %>
  max_package_size: <%= p("cc.packages.max_package_size") %>
  <% if_p("cc.packages.cdn") do %>
  cdn:
    uri: <%= p("cc.packages.cdn.uri") %>
    key_pair_id: <%= p("cc.packages.cdn.key_pair_id") %>
    private_key: <%= p("cc.packages.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.packages.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.packages.fog_aws_storage_options", {}).to_json %>
  fog_gcp_storage_options: <%= p("cc.packages.fog_gcp_storage_options", {}).to_json %>

droplets:
  blobstore_type: <%= p("cc.droplets.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.droplets.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.droplets.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.droplets.webdav_config.private_endpoint") %>
    username: <%= p("cc.droplets.webdav_config.username") %>
    password: <%= yaml_escape(p("cc.droplets.webdav_config.password")) %>
    <% if p("cc.droplets.webdav_config.ca_cert") != "" && p("cc.droplets.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/droplets_ca_cert.pem"
    <% end %>
  droplet_directory_key: <%= p("cc.droplets.droplet_directory_key") %>
  <% if_p("cc.droplets.cdn") do %>
  cdn:
    uri: <%= p("cc.droplets.cdn.uri") %>
    key_pair_id: <%= p("cc.droplets.cdn.key_pair_id") %>
    private_key: <%= p("cc.droplets.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.droplets.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.droplets.fog_aws_storage_options", {}).to_json %>
  fog_gcp_storage_options: <%= p("cc.droplets.fog_gcp_storage_options", {}).to_json %>

buildpacks:
  blobstore_type: <%= p("cc.buildpacks.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.buildpacks.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.buildpacks.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.buildpacks.webdav_config.private_endpoint") %>
    username: <%= p("cc.buildpacks.webdav_config.username") %>
    password: <%= yaml_escape(p("cc.buildpacks.webdav_config.password")) %>
    <% if p("cc.buildpacks.webdav_config.ca_cert") != "" && p("cc.buildpacks.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/buildpacks_ca_cert.pem"
    <% end %>
  buildpack_directory_key: <%= p("cc.buildpacks.buildpack_directory_key") %>
  <% if_p("cc.buildpacks.cdn") do %>
  cdn:
    uri: <%= p("cc.buildpacks.cdn.uri") %>
    key_pair_id: <%= p("cc.buildpacks.cdn.key_pair_id") %>
    private_key: <%= p("cc.buildpacks.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.buildpacks.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.buildpacks.fog_aws_storage_options", {}).to_json %>
  fog_gcp_storage_options: <%= p("cc.buildpacks.fog_gcp_storage_options", {}).to_json %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

<% if_p("cc.database_encryption") do | database_encryption |
  keys = database_encryption['keys']
  if keys.is_a?(Array)
    current_key_label = extract_active_encryption_key_label(keys)
    keys = keys.reduce({}) do |result, key_hash|
     result[key_hash['label']] = key_hash['encryption_key']
     result
    end
  elsif keys.is_a?(Hash)
    current_key_label = database_encryption['current_key_label']
  end
%>

database_encryption:
  keys: <%= keys.to_json %>
  current_key_label: <%= current_key_label.inspect %>
  pbkdf2_hmac_iterations: <%= link("cloud_controller_internal").p("cc.database_encryption.experimental_pbkdf2_hmac_iterations") %>
<% end %>

disable_custom_buildpacks: <%= p("cc.disable_custom_buildpacks") %>

broker_client_timeout_seconds: <%= p("cc.broker_client_timeout_seconds") %>
broker_client_default_async_poll_interval_seconds: <%= p('cc.broker_client_default_async_poll_interval_seconds') %>
broker_client_max_async_poll_duration_minutes: <%= p('cc.broker_client_max_async_poll_duration_minutes') %>
broker_client_async_poll_exponential_backoff_rate:  <%= p('cc.broker_client_async_poll_exponential_backoff_rate') %>

broker_client_response_parser:
  log_errors: <%= p("cc.broker_client_response_parser.log_errors") %>
  log_validators: <%= p("cc.broker_client_response_parser.log_validators") %>
  log_response_fields: <%= p("cc.broker_client_response_parser.log_response_fields").to_json %>

<% if_p("uaa.clients.cc-service-dashboards.secret") do %>
uaa_client_name: "cc-service-dashboards"
uaa_client_secret: <%= p("uaa.clients.cc-service-dashboards.secret") %>
uaa_client_scope: <%= p("uaa.clients.cc-service-dashboards.scope") %>
<% end %>

cc_service_key_client_name: "cc_service_key_client"

allow_app_ssh_access: <%= p("cc.allow_app_ssh_access") %>
default_app_ssh_access: <%= p("cc.default_app_ssh_access") %>

skip_cert_verify: <%= p("ssl.skip_cert_verify") %>

<%
file_server_url = p("cc.diego.file_server_url")
if_link("file_server") do |file_server|
  if file_server.p("https_server_enabled")
    file_server_url = file_server.p("https_url")
  end
end
%>

diego:
  temporary_oci_buildpack_mode: <%= p("cc.diego.temporary_oci_buildpack_mode", nil) %>
  enable_declarative_asset_downloads: <%= p("cc.diego.enable_declarative_asset_downloads") %>
  file_server_url: <%= file_server_url %>
  cc_uploader_url: <%= p("cc.diego.cc_uploader_url") %>
  use_privileged_containers_for_running: <%= p("cc.diego.use_privileged_containers_for_running") %>
  use_privileged_containers_for_staging: <%= p("cc.diego.use_privileged_containers_for_staging") %>
  lifecycle_bundles: <%= p("cc.diego.lifecycle_bundles").to_json %>
  droplet_destinations: <%= p("cc.diego.droplet_destinations").to_json %>
  bbs:
    url: <%= p("cc.diego.bbs.url") %>
    key_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls.key
    cert_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls.crt
    ca_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls_ca.crt
    connect_timeout: <%= p("cc.diego.bbs.connect_timeout") %>
    send_timeout: <%= p("cc.diego.bbs.send_timeout") %>
    receive_timeout: <%= p("cc.diego.bbs.receive_timeout") %>
  pid_limit: <%= p("cc.diego.pid_limit") %>

<% if p("routing_api.enabled") %>
routing_api:
  url: <%= "https://api.#{system_domain}/routing" %>
  routing_client_name: "cc_routing"
  routing_client_secret: <%= p("uaa.clients.cc_routing.secret") %>
<% end %>

<% if_link("credhub") do |credhub| %>
credhub_api:
  internal_url: <%= "https://#{p("credhub_api.hostname")}:#{credhub.p("credhub.port")}" %>
<% end %>

credential_references:
  interpolate_service_bindings: <%= p("cc.credential_references.interpolate_service_bindings") %>

perform_blob_cleanup: <%= p("cc.perform_blob_cleanup") %>

system_domain: <%= p("system_domain") %>
system_hostnames: <%= link("cloud_controller_internal").p("cc.system_hostnames") %>

<%
  internal_vip_range =  p("cc.internal_route_vip_range")
  raise StandardError.new("invalid cc.internal_route_vip_range: #{internal_vip_range}") unless internal_vip_range =~ /\A (?:\d{1,3}\.){3} \d{1,3} \/ \d{1,3} \z/x

  parts = internal_vip_range.split(/[\.\/]/).map(&:to_i)
  raise StandardError.new("invalid cc.internal_route_vip_range: #{internal_vip_range}") if parts[0..3].any? {|x| x > 255} || parts[4] > 32
%>

internal_route_vip_range: <%= internal_vip_range %>

disable_private_domain_cross_space_context_path_route_sharing: <%= link("cloud_controller_internal").p("cc.disable_private_domain_cross_space_context_path_route_sharing") %>

max_labels_per_resource: <%= link("cloud_controller_internal").p("cc.max_labels_per_resource") %>
max_annotations_per_resource: <%= link("cloud_controller_internal").p("cc.max_annotations_per_resource") %>
custom_metric_tag_prefix_list: <%= link("cloud_controller_internal").p("cc.custom_metric_tag_prefix_list") %>
cpu_weight_min_memory: <%= link("cloud_controller_internal").p("cc.cpu_weight_min_memory") %>
cpu_weight_max_memory: <%= link("cloud_controller_internal").p("cc.cpu_weight_max_memory") %>
max_manifest_service_binding_poll_duration_in_seconds: <%= p("cc.max_manifest_service_binding_poll_duration_in_seconds") %>
